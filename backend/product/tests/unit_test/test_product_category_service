import unittest
from unittest.mock import patch
from product.service.prod_category_service import ProductCategoryService

class TestProductCategoryService(unittest.TestCase):

    @patch('product.service.prod_category_service.ProductCategoryRepository.create')
    def test_create_category(self, mock_create):
        mock_create.return_value = {'title': 'Food'}
        result = ProductCategoryService.create_category({'title': 'Food'})
        self.assertEqual(result['title'], 'Food')
        mock_create.assert_called_once()

    @patch('product.service.prod_category_service.ProductCategoryRepository.get_all')
    def test_get_all_categories(self, mock_get):
        mock_get.return_value = [{'title': 'Food'}]
        result = ProductCategoryService.get_all_categories()
        self.assertEqual(len(result), 1)
        mock_get.assert_called_once()

    @patch('product.service.prod_category_service.ProductCategoryRepository.get_by_id')
    def test_get_category_by_id(self, mock_get):
        mock_get.return_value = {'id': 'c1'}
        result = ProductCategoryService.get_category_by_id('c1')
        self.assertEqual(result['id'], 'c1')
        mock_get.assert_called_once_with('c1')

    @patch('product.service.prod_category_service.ProductCategoryRepository.update')
    def test_update_category(self, mock_update):
        mock_update.return_value = {'title': 'Updated'}
        result = ProductCategoryService.update_category('c1', {'title': 'Updated'})
        self.assertEqual(result['title'], 'Updated')
        mock_update.assert_called_once_with('c1', {'title': 'Updated'})

    @patch('product.service.prod_category_service.ProductCategoryRepository.delete')
    def test_delete_category(self, mock_delete):
        mock_delete.return_value = True
        result = ProductCategoryService.delete_category('c1')
        self.assertTrue(result)
        mock_delete.assert_called_once_with('c1')


if __name__ == '__main__':
    unittest.main()